import{_ as e,f as t}from"./index-CslQqMog.js";const a="/_assets/doc-comment-C4Pd9mxy.png",s={type:"article",title:"Comments in Code",description:'So one more pull request got rejected for having a comment; "Good code is self-documenting.", said the reviewer.',tags:["programming","coding style"],url:"/articles/2019-05-26-comments-in-code",canonicalUrl:"https://znck.dev/articles/2019-05-26-comments-in-code",author:"Rahul Kadyan",published:"2019-05-26T00:00:00.000Z",frontmatter:{published:"2019-05-26T00:00:00.000Z",tags:["programming","coding style"]},socialImage:"../assets/2019-comments-in-code/doc-comment.png"};s.published=new Date(s.published);s.socialImage=a;const n={};function l(o,i,h,r,k,p){return i[0]||(i[0]=t(`<h1 id="comments-in-code" class="moss-anchored-heading">Comments in Code<a tabindex="-1" class="moss-anchor-container" href="#comments-in-code"><span class="moss-anchor"></span><span class="sr-only">Jump to section titled Comments in Code</span></a></h1><p>So one more pull request got rejected for having a comment; &quot;Good code is self-documenting.&quot;, said the reviewer.</p><h2 id="good-code" class="moss-anchored-heading">Good code<a tabindex="-1" class="moss-anchor-container" href="#good-code"><span class="moss-anchor"></span><span class="sr-only">Jump to section titled Good code</span></a></h2><p>What is good code? My code runs fast, is it &quot;good code&quot;? My code requires low memory, is it &quot;good code&quot;? It is difficult to answer, &quot;what is good code?&quot; without knowing, &quot;why do we write code?&quot;.</p><p>In my opinion, we write code to tell other people what we want a computer to do. We write for people. The preface of the book <a href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-7.html" target="_blank" rel="noopener noreferrer">Structure and Interpretation of Computer Programs</a>, by Abelson, Sussman, and Sussman, captures the intent appropriately:</p><blockquote><p>Programs must be written for people to read, and only incidentally for machines to execute.</p></blockquote><p>Code is for people to read.</p><p>In an ideal world, with a perfect language, a code is for people to read. However, ours is not an ideal world, and any programming language is far from perfect. Once in a while, we have to cut corners to improve performance or to fix a tricky bug or to handle an edge-case. After all, we want to ship better products, and it diverts us from the primary objective of writing code: &quot;for people to read.&quot;</p><p>Every once in a while, we have to complicate parts of some code to make the product better. Machines are happy with this complicated code, so are our customers. However, humans (a.k.a. developers) are troubled. Every time, a developer visits this piece of complicated code, she wonders why did we do this?</p><p>Indeed the &quot;why&quot; is missing from any code. As I said before, we write code to tell other people what we want a computer to do. Yes! &quot;what&quot;; The code says &quot;what&quot; (or more precisely &quot;how&quot;). We need something to share the &quot;why&quot; behind the code, and comments fill that gap. The comments are part of any language syntax to convey, why the code is written this way?</p><h2 id="comments-tell-why" class="moss-anchored-heading">Comments tell Why<a tabindex="-1" class="moss-anchor-container" href="#comments-tell-why"><span class="moss-anchor"></span><span class="sr-only">Jump to section titled Comments tell Why</span></a></h2><p>Let&#39;s take an example of lazy <code>v-model</code> directive in Vue. The <code>v-model</code> directive binds a variable in JavaScript to an <code>&lt;input&gt;</code> field such that the variables value updates as user types in the input field. However, for languages which use <span title="Input Method Handler"><a href="https://en.wikipedia.org/wiki/Input_method" target="_blank" rel="noopener noreferrer">IME</a></span>, this approach does not work, so Vue provides a lazy modifier. Following is the code snippet which handles lazy modifier:</p><pre class="shiki shiki-themes min-light min-dark" style="background-color:light-dark(#ffffff, #1f1f1f);--shiki-light-bg:#ffffff;--shiki-dark-bg:#1f1f1f;color:light-dark(#24292eff, #b392f0);--shiki-light:#24292eff;--shiki-dark:#b392f0;" tabindex="0" data-language="js"><code class="language-js"><span class="line"><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">if</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> (</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">!</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">binding</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">modifiers</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.lazy) {</span></span>
<span class="line"><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">  el</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.addEventListener</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(</span><span style="color:light-dark(#22863A, #FFAB70);--shiki-light:#22863A;--shiki-dark:#FFAB70;">&#39;compositionstart&#39;</span><span style="color:light-dark(#212121, #BBBBBB);--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> onCompositionStart)</span></span>
<span class="line"><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">  el</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.addEventListener</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(</span><span style="color:light-dark(#22863A, #FFAB70);--shiki-light:#22863A;--shiki-dark:#FFAB70;">&#39;compositionend&#39;</span><span style="color:light-dark(#212121, #BBBBBB);--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> onCompositionEnd)</span></span>
<span class="line"><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">  el</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.addEventListener</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(</span><span style="color:light-dark(#22863A, #FFAB70);--shiki-light:#22863A;--shiki-dark:#FFAB70;">&#39;change&#39;</span><span style="color:light-dark(#212121, #BBBBBB);--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> onCompositionEnd)</span></span>
<span class="line"><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">}</span></span></code></pre><p>It is clear from the code that the <code>onCompositionEnd</code> method listens to <code>compositionend</code> and <code>change</code> events. <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event" target="_blank" rel="noopener noreferrer">The spec</a> says that the <code>compositionend</code> event is fired when composition completes or cancels, then why does this piece of code attach extra event listener. It looks like Evan forgot to remove it, let&#39;s send a PR. It makes sense absolute sense to remove that line of code, however only because the why is missing! Let&#39;s add the &quot;why&quot; to above code:</p><pre class="shiki shiki-themes min-light min-dark" style="background-color:light-dark(#ffffff, #1f1f1f);--shiki-light-bg:#ffffff;--shiki-dark-bg:#1f1f1f;color:light-dark(#24292eff, #b392f0);--shiki-light:#24292eff;--shiki-dark:#b392f0;" tabindex="0" data-language="js"><code class="language-js"><span class="line"><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">if</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> (</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">!</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">binding</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">modifiers</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.lazy) {</span></span>
<span class="line"><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">  el</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.addEventListener</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(</span><span style="color:light-dark(#22863A, #FFAB70);--shiki-light:#22863A;--shiki-dark:#FFAB70;">&#39;compositionstart&#39;</span><span style="color:light-dark(#212121, #BBBBBB);--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> onCompositionStart)</span></span>
<span class="line"><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">  el</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.addEventListener</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(</span><span style="color:light-dark(#22863A, #FFAB70);--shiki-light:#22863A;--shiki-dark:#FFAB70;">&#39;compositionend&#39;</span><span style="color:light-dark(#212121, #BBBBBB);--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> onCompositionEnd)</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">  // Safari &lt; 10.2 &amp; UIWebView doesn&#39;t fire compositionend when</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">  // switching focus before confirming composition choice</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">  // this also fixes the issue where some browsers e.g. iOS Chrome</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">  // fires &quot;change&quot; instead of &quot;input&quot; on autocomplete.</span></span>
<span class="line"><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">  el</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.addEventListener</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(</span><span style="color:light-dark(#22863A, #FFAB70);--shiki-light:#22863A;--shiki-dark:#FFAB70;">&#39;change&#39;</span><span style="color:light-dark(#212121, #BBBBBB);--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> onCompositionEnd)</span></span>
<span class="line"><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">}</span></span></code></pre><p>What do you think now? Does it make any sense to remove the <code>change</code> event listener? Comments provide essential information about the code without adding any runtime overhead. Does that mean all comments are good? What do all comments mean anyways?</p><h2 id="types-of-comments" class="moss-anchored-heading">Types of Comments<a tabindex="-1" class="moss-anchor-container" href="#types-of-comments"><span class="moss-anchor"></span><span class="sr-only">Jump to section titled Types of Comments</span></a></h2><p>Comments are free-form text. Depending on the type of text, we get different kinds of comments. Following types are as I see them:</p><ul><li>Clarification Comments</li><li>Documentation Comments</li><li>License Comments</li><li>Reference Comments</li><li>Tagged Comments</li><li>Control Comments</li><li>Dead-code Comments</li></ul><h3 id="clarification-comments" class="moss-anchored-heading">Clarification Comments<a tabindex="-1" class="moss-anchor-container" href="#clarification-comments"><span class="moss-anchor"></span><span class="sr-only">Jump to section titled Clarification Comments</span></a></h3><p>As evident from the name, these comments clarify some obscure piece of code or logic. Let&#39;s take another example from vue source:</p><figure data-type="code"><pre class="shiki shiki-themes min-light min-dark" style="background-color:light-dark(#ffffff, #1f1f1f);--shiki-light-bg:#ffffff;--shiki-dark-bg:#1f1f1f;color:light-dark(#24292eff, #b392f0);--shiki-light:#24292eff;--shiki-dark:#b392f0;" tabindex="0" data-language="js"><code class="language-js"><span class="line"><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">let</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> getNow </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">=</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> Date</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.now</span></span>
<span class="line"><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">if</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> (inBrowser </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;"> !</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">isIE) {</span></span>
<span class="line"><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">  const</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> performance</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;"> =</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> window</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.performance</span></span>
<span class="line"><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">  if</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> (performance </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;"> typeof</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> performance</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.now </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">===</span><span style="color:light-dark(#22863A, #FFAB70);--shiki-light:#22863A;--shiki-dark:#FFAB70;"> &#39;function&#39;</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getNow</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">() </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">&gt;</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> document</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.createEvent</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(</span><span style="color:light-dark(#22863A, #FFAB70);--shiki-light:#22863A;--shiki-dark:#FFAB70;">&#39;Event&#39;</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">).timeStamp) {</span></span>
<span class="line"><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getNow</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;"> =</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> () </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">=&gt;</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> performance</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.now</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">()</span></span>
<span class="line"><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">  }</span></span>
<span class="line"><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">}</span></span></code></pre><figcaption><a href="https://github.com/vuejs/vue/blob/22790b250cd5239a8379b4ec8cc3a9b570dac4bc/src/core/observer/scheduler.js" target="_blank" rel="noopener noreferrer">core/observer/scheduler.js</a> with comments removed </figcaption></figure><p>This code snippet patches an inconsistency in browsers event timestamp API. From looking at the code, we get that we want to use <code>Date.now</code>; However, for some condition, we switch to <code>performance.now</code>. It is unclear why would we need this, but the comments can clarify:</p><figure data-type="code"><pre class="shiki shiki-themes min-light min-dark" style="background-color:light-dark(#ffffff, #1f1f1f);--shiki-light-bg:#ffffff;--shiki-dark-bg:#1f1f1f;color:light-dark(#24292eff, #b392f0);--shiki-light:#24292eff;--shiki-dark:#b392f0;" tabindex="0" data-language="js"><code class="language-js"><span class="line"><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">let</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> getNow </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">=</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> Date</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.now</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">// Determine what event timestamp the browser is using. Annoyingly, the</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">// timestamp can either be hi-res (relative to page load) or low-res</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">// (relative to UNIX epoch), so in order to compare time we have to use the</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">// same timestamp type when saving the flush timestamp.</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">// All IE versions use low-res event timestamps, and have problematic clock</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">// implementations (#9632)</span></span>
<span class="line"><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">if</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> (inBrowser </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;"> !</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">isIE) {</span></span>
<span class="line"><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">  const</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> performance</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;"> =</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> window</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.performance</span></span>
<span class="line"><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">  if</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> (performance </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">&amp;&amp;</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;"> typeof</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> performance</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.now </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">===</span><span style="color:light-dark(#22863A, #FFAB70);--shiki-light:#22863A;--shiki-dark:#FFAB70;"> &#39;function&#39;</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getNow</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">() </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">&gt;</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> document</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.createEvent</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(</span><span style="color:light-dark(#22863A, #FFAB70);--shiki-light:#22863A;--shiki-dark:#FFAB70;">&#39;Event&#39;</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">).timeStamp) {</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">    // if the event timestamp, although evaluated AFTER the Date.now(), is</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">    // smaller than it, it means the event is using a hi-res timestamp,</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">    // and we need to use the hi-res version for event listener timestamps as</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">    // well.</span></span>
<span class="line"><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getNow</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;"> =</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> () </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">=&gt;</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> performance</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.now</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">()</span></span>
<span class="line"><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">  }</span></span>
<span class="line"><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">}</span></span></code></pre><figcaption><a href="https://github.com/vuejs/vue/blob/22790b250cd5239a8379b4ec8cc3a9b570dac4bc/src/core/observer/scheduler.js" target="_blank" rel="noopener noreferrer">core/observer/scheduler.js</a> from vue source </figcaption></figure><p>The comments which tell &quot;why&quot; and explain the reason behind the code, I call them clarification comment. I recommend using clarification comments as long as you maintain them with the code associated. Yes, they add a little maintenance overhead but also keep the code understandable for humans.</p><h3 id="documentation-comments" class="moss-anchored-heading">Documentation Comments<a tabindex="-1" class="moss-anchor-container" href="#documentation-comments"><span class="moss-anchor"></span><span class="sr-only">Jump to section titled Documentation Comments</span></a></h3><p>Even the purist self-documenting developers have nothing against documentation comments (or doc comments). Doc comments provide additional information for APIs and make them approachable by humans.</p><pre class="shiki shiki-themes min-light min-dark" style="background-color:light-dark(#ffffff, #1f1f1f);--shiki-light-bg:#ffffff;--shiki-dark-bg:#1f1f1f;color:light-dark(#24292eff, #b392f0);--shiki-light:#24292eff;--shiki-dark:#b392f0;" tabindex="0" data-language="js"><code class="language-js"><span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">/**</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;"> * Computes (a^b)</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;"> *</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;"> * </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">@param</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;"> a - The base number</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;"> * </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">@param</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> {number}</span><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;"> b - The exponent.</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;"> */</span></span>
<span class="line"><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">function</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pow</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(a</span><span style="color:light-dark(#212121, #BBBBBB);--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> b) {</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">  // ...</span></span>
<span class="line"><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">}</span></span></code></pre><p>Editors use the structured information from doc comments to provide rich developer experience.</p><p><img src="`+a+`" alt="Screenshot: Editor intellisense using doc comments"></p><p>Doc comments and editor intellisense give superpowers to us, we know what would a piece of code do without looking at the source.</p><p>Also, Doc comments are used to automate API documentation generation.</p><h3 id="license-comments" class="moss-anchored-heading">License Comments<a tabindex="-1" class="moss-anchor-container" href="#license-comments"><span class="moss-anchor"></span><span class="sr-only">Jump to section titled License Comments</span></a></h3><p>Today, we do dependency driven development. Every project depends on thousands of other projects. Licenses play an essential role in DDD. Some licenses allow modifying the original code. For example, the virtual DOM implementation in vue is a fork of Snabbdom.</p><figure data-type="code"><pre class="shiki shiki-themes min-light min-dark" style="background-color:light-dark(#ffffff, #1f1f1f);--shiki-light-bg:#ffffff;--shiki-dark-bg:#1f1f1f;color:light-dark(#24292eff, #b392f0);--shiki-light:#24292eff;--shiki-dark:#b392f0;" tabindex="0" data-language="js"><code class="language-js"><span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">/**</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;"> * Virtual DOM patching algorithm based on Snabbdom by</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;"> * Simon Friis Vindum (@paldepind)</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;"> * Licensed under the MIT License</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;"> * https://github.com/paldepind/snabbdom/blob/master/LICENSE</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;"> *</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;"> * modified by Evan You (@yyx990803)</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;"> *</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;"> * Not type-checking this because this file is perf-critical and the cost</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;"> * of making flow understand it is not worth it.</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;"> */</span></span></code></pre><figcaption><a href="https://github.com/vuejs/vue/blob/22790b250cd5239a8379b4ec8cc3a9b570dac4bc/src/core/vdom/patch .js" target="_blank" rel="noopener noreferrer">core/vdom/patch.js:L1-10</a> from vue source </figcaption></figure><p>License comments, in derived work, are an excellent way of honoring another person&#39;s work.</p><h3 id="reference-comments" class="moss-anchored-heading">Reference Comments<a tabindex="-1" class="moss-anchor-container" href="#reference-comments"><span class="moss-anchor"></span><span class="sr-only">Jump to section titled Reference Comments</span></a></h3><p>A significant part of a developer&#39;s work is copy-pasting from StackOverflow; we all know that. Sometimes we copy code without even thinking about it. There&#39;s no shame in that, but provide the reference to the next person working on that code. We can use a reference comment for that:</p><figure data-type="code"><pre class="shiki shiki-themes min-light min-dark" style="background-color:light-dark(#ffffff, #1f1f1f);--shiki-light-bg:#ffffff;--shiki-dark-bg:#1f1f1f;color:light-dark(#24292eff, #b392f0);--shiki-light:#24292eff;--shiki-dark:#b392f0;" tabindex="0" data-language="js"><code class="language-js"><span class="line"><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">if</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> (</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">tag</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.indexOf</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(</span><span style="color:light-dark(#22863A, #FFAB70);--shiki-light:#22863A;--shiki-dark:#FFAB70;">&#39;-&#39;</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">) </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">&gt;</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;"> -</span><span style="color:light-dark(#1976D2, #F8F8F8);--shiki-light:#1976D2;--shiki-dark:#F8F8F8;">1</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">) {</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">  // http://stackoverflow.com/a/28210364/1070244</span></span>
<span class="line"><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">  return</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> (unknownElementCache[tag] </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">    el</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">constructor</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;"> ===</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> window</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.HTMLUnknownElement </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">||</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> el</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">constructor</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;"> ===</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> window</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.HTMLElement)</span></span>
<span class="line"><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">}</span></span></code></pre><figcaption><a href="https://github.com/vuejs/vue/blob/22790b250cd5239a8379b4ec8cc3a9b570dac4bc/src/platforms/web/util/element.js" target="_blank" rel="noopener noreferrer">platforms/web/util/element.js:L66-72</a> from vue source </figcaption></figure><p>The reference comments are often permalinks to StackOverflow (or similar platform) answers, although they can be page numbers from any book or snippets from other projects too. Add a reference comment whenever you copy-paste something in your code.</p><h3 id="tagged-comments" class="moss-anchored-heading">Tagged Comments<a tabindex="-1" class="moss-anchor-container" href="#tagged-comments"><span class="moss-anchor"></span><span class="sr-only">Jump to section titled Tagged Comments</span></a></h3><p>Tagged comments are inline reminders, something like a note to future self. They start with a fixed prefix, called tag here. Most common tag is <code>TODO</code>, but you can use any tag.</p><pre class="shiki shiki-themes min-light min-dark" style="background-color:light-dark(#ffffff, #1f1f1f);--shiki-light-bg:#ffffff;--shiki-dark-bg:#1f1f1f;color:light-dark(#24292eff, #b392f0);--shiki-light:#24292eff;--shiki-dark:#b392f0;" tabindex="0" data-language="js"><code class="language-js"><span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">// TODO: Write some code here</span></span></code></pre><p>Let&#39;s take another example from vue source:</p><figure data-type="code"><pre class="shiki shiki-themes min-light min-dark" style="background-color:light-dark(#ffffff, #1f1f1f);--shiki-light-bg:#ffffff;--shiki-dark-bg:#1f1f1f;color:light-dark(#24292eff, #b392f0);--shiki-light:#24292eff;--shiki-dark:#b392f0;" tabindex="0" data-language="js"><code class="language-js"><span class="line"><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">prevChildren</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.forEach</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">((c) </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">=&gt;</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">  c</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">data</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.transition </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">=</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> transitionData</span></span>
<span class="line"></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">  // TODO: record before patch positions</span></span>
<span class="line"></span>
<span class="line"><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">  if</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> (map[</span><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">c</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.key]) {</span></span>
<span class="line"><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">    kept</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.push</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(c)</span></span>
<span class="line"><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">  } </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">else</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="color:light-dark(#1976D2, #79B8FF);--shiki-light:#1976D2;--shiki-dark:#79B8FF;">    removed</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.push</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(c)</span></span>
<span class="line"><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">  }</span></span>
<span class="line"><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">})</span></span></code></pre><figcaption><a href="https://github.com/vuejs/vue/blob/22790b250cd5239a8379b4ec8cc3a9b570dac4bc/src/platforms/weex/runtime/components/transition-group.js" target="_blank" rel="noopener noreferrer">platforms/weex/runtime/components/transition-group.js:L60-70</a> from vue source </figcaption></figure><p>Tagged comments help us to continue concentrating on the current task while leaving hints for what to do next.</p><h3 id="control-comments" class="moss-anchored-heading">Control Comments<a tabindex="-1" class="moss-anchor-container" href="#control-comments"><span class="moss-anchor"></span><span class="sr-only">Jump to section titled Control Comments</span></a></h3><p>Today, we have a plethora of tools, making it easier to write code. Linters make us adhere to a code style.<br> Transpilers allow us to use the latest syntax.<br> Bundlers help us to ship code better.</p><p>These tools work well in most cases, but there are some scenarios where they need some help from the developer. Comments again provide an excellent way to provide information and context to these tools.</p><p>For example, webpack allows async imports to be preloaded or prefetched, and we can configure this inline:</p><pre class="shiki shiki-themes min-light min-dark" style="background-color:light-dark(#ffffff, #1f1f1f);--shiki-light-bg:#ffffff;--shiki-dark-bg:#1f1f1f;color:light-dark(#24292eff, #b392f0);--shiki-light:#24292eff;--shiki-dark:#b392f0;" tabindex="0" data-language="js"><code class="language-js"><span class="line"><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">const</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HomePage</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;"> =</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> () </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  import</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">    /* webpackPreload: true */</span></span>
<span class="line"><span style="color:light-dark(#22863A, #FFAB70);--shiki-light:#22863A;--shiki-dark:#FFAB70;">    &#39;./pages/home.vue&#39;</span></span>
<span class="line"><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">  )</span></span>
<span class="line"><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">const</span><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AboutPage</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;"> =</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> () </span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  import</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">    /* webpackPrefetch: true */</span></span>
<span class="line"><span style="color:light-dark(#22863A, #FFAB70);--shiki-light:#22863A;--shiki-dark:#FFAB70;">    &#39;./pages/about.vue&#39;</span></span>
<span class="line"><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">  )</span></span></code></pre><p>The comment <code>/* webpackPreload: true */</code> configures webpack inline to preload the home page. Similar, control comments are offered by eslint too:</p><pre class="shiki shiki-themes min-light min-dark" style="background-color:light-dark(#ffffff, #1f1f1f);--shiki-light-bg:#ffffff;--shiki-dark-bg:#1f1f1f;color:light-dark(#24292eff, #b392f0);--shiki-light:#24292eff;--shiki-dark:#b392f0;" tabindex="0" data-language="js"><code class="language-js"><span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">// eslint-disable-next-line</span></span>
<span class="line"><span style="color:light-dark(#6F42C1, #B392F0);--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eval</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(</span><span style="color:light-dark(#D32F2F, #F97583);--shiki-light:#D32F2F;--shiki-dark:#F97583;">...</span><span style="color:light-dark(#24292EFF, #B392F0);--shiki-light:#24292EFF;--shiki-dark:#B392F0;">)</span></span></code></pre><p>The comment <code>// eslint-disable-next-line</code> tells eslint to shut up for the next line. Control comments give superpowers to toolings and developers to finetune their applications.</p><h3 id="dead-code-comments" class="moss-anchored-heading">Dead-code Comments<a tabindex="-1" class="moss-anchor-container" href="#dead-code-comments"><span class="moss-anchor"></span><span class="sr-only">Jump to section titled Dead-code Comments</span></a></h3><p>The commented code or dead-code comments are the worst kinds of comments. There is absolutely no reason for their existence, delete them!</p><p>Let&#39;s see an example from vue source:</p><figure data-type="code"><pre class="shiki shiki-themes min-light min-dark" style="background-color:light-dark(#ffffff, #1f1f1f);--shiki-light-bg:#ffffff;--shiki-dark-bg:#1f1f1f;color:light-dark(#24292eff, #b392f0);--shiki-light:#24292eff;--shiki-dark:#b392f0;" tabindex="0" data-language="js"><code class="language-js"><span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">// children.forEach(callPendingCbs)</span></span>
<span class="line"></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">// Promise.all(children.map(c =&gt; {</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">//   const oldPos = c.data.pos</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">//   const newPos = c.data.newPos</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">//   const dx = oldPos.left - newPos.left</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">//   const dy = oldPos.top - newPos.top</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">//   if (dx || dy) {</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">//     c.data.moved = true</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">//     return this.animate(c.elm, {</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">//       styles: {</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">//         transform: \`translate(\${dx}px,\${dy}px)\`</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">//       }</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">//     })</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">//   }</span></span>
<span class="line"><span style="color:light-dark(#C2C3C5, #6B737C);--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">// }))</span></span></code></pre><figcaption><a href="https://github.com/vuejs/vue/blob/22790b250cd5239a8379b4ec8cc3a9b570dac4bc/src/platforms/weex/runtime/components/transition-group.js" target="_blank" rel="noopener noreferrer">platforms/weex/runtime/components/transition-group.js:L97-128</a> from vue source </figcaption></figure><p>I hate dead-code comments; they are easy to add but difficult to remove. When you come back to dead-code comments, you always wonder, why did you comment this code in the first place?</p><p>Please remove dead-code comments from vue, send a pull request.</p><h2 id="comment-comment-comment" class="moss-anchored-heading">Comment! Comment! Comment<a tabindex="-1" class="moss-anchor-container" href="#comment-comment-comment"><span class="moss-anchor"></span><span class="sr-only">Jump to section titled Comment! Comment! Comment</span></a></h2><p>Comments are compelling tools in programming languages. Use them to complement your code, to answer questions which are unanswered by the code. Do not use comments to create more questions.</p>`,62))}const F=e(n,[["render",l],["__file","2019-05-26-comments-in-code.md"]]);export{F as default,s as pageData};
